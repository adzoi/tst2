// ai.js - AI assistant with comprehensive local product knowledge

export class AIService {
  constructor(productService) {
    this.productService = productService;
  }

  buildProductContext() {
    const products = this.productService.getProducts();
    return products.map(p => `${p.name} | ${p.category} | ${p.active_ingredient} | ‚ÇΩ${p.price} | Stock: ${p.stock}`).join('\n');
  }

  // Detect if query is in Russian
  isRussianQuery(query) {
    const russianPattern = /[–∞-—è—ë]/i;
    return russianPattern.test(query);
  }

  // Get current language setting
  getCurrentLanguage() {
    // Try multiple ways to get the current language
    if (typeof window !== 'undefined' && window.CURRENT_LANG) {
      return window.CURRENT_LANG;
    }
    if (typeof localStorage !== 'undefined') {
      return localStorage.getItem('medicineSeller-lang') || 'ru';
    }
    return 'ru'; // Default to Russian
  }

  // Get appropriate response based on language
  getLocalizedResponse(key, params = {}) {
    const currentLang = this.getCurrentLanguage();
    console.log('AI Language Detection:', { key, currentLang, params }); // Debug log
    
    const responses = {
      en: {
        yesInStock: (name, stock, price, description) => `Yes! ${name} is in stock. We have ${stock} units available.\n\nPrice: ${price}\n${description}`,
        outOfStock: (name, price, description) => `Sorry, ${name} is currently out of stock.\n\nPrice: ${price}\n${description}\n\nWould you like me to show you similar products?`,
        productsContaining: (ingredient) => `Products containing ${ingredient}:\n\n`,
        productsWithIngredients: `Products with those ingredients:\n\n`,
        hereAreProducts: (category) => `Here are our ${category} products:\n\n`,
        availableCategories: `Available categories:\n`,
        mostAffordable: `Here are our most affordable products:\n\n`,
        premiumProducts: `Here are our premium products:\n\n`,
        stockStatus: (inStock, outOfStock) => `Stock status:\n‚Ä¢ ${inStock} products in stock\n‚Ä¢ ${outOfStock} products out of stock\n\nAvailable products:\n\n`,
        forCondition: (condition) => `For ${condition}, I recommend:\n\n`,
        foundProducts: (count) => `I found ${count} product(s) matching your search:\n\n`,
        topRecommendations: `Here are our top recommendations:\n\n`,
        helpText: `I can help you with:\n‚Ä¢ Finding products by name or condition\n‚Ä¢ Checking stock availability\n‚Ä¢ Showing products by category\n‚Ä¢ Getting prices and product information\n‚Ä¢ Information about ingredients\n‚Ä¢ Product recommendations\n\nJust ask me about any health condition or product you're looking for!`,
        heresWhatFound: `Here's what I found:\n\n`,
        stockInfo: (stock) => stock > 0 ? `In stock (${stock})` : 'Out of stock',
        // Purchase guidance responses
        howToBuy: `To purchase products from our pharmacy:\n\n1. **Browse Products**: Look through our catalog or use the search function\n2. **Add to Cart**: Click the "Add to Cart" button on any product\n3. **View Cart**: Click the cart icon in the top right to review your items\n4. **Checkout**: Use the WhatsApp button to complete your order\n5. **Payment**: We'll arrange payment and delivery through WhatsApp\n\nNeed help finding a specific product? Just ask me!`,
        purchaseSteps: `Here's how to buy from our pharmacy:\n\nüõí **Step 1**: Browse our products or search for what you need\nüõí **Step 2**: Click "Add to Cart" on desired items\nüõí **Step 3**: Review your cart (cart icon in top right)\nüõí **Step 4**: Click "Order via WhatsApp" to complete purchase\nüõí **Step 5**: We'll handle payment and delivery details\n\nI can help you find specific products or answer questions about any item!`,
        cartHelp: `Shopping cart help:\n\n‚Ä¢ **Add items**: Click "Add to Cart" on any product\n‚Ä¢ **View cart**: Click the cart icon (üõí) in the top right\n‚Ä¢ **Remove items**: Use the trash icon in the cart\n‚Ä¢ **Checkout**: Click "Order via WhatsApp" when ready\n‚Ä¢ **Empty cart**: Use "Clear Cart" if you want to start over\n\nNeed product recommendations? Just ask!`,
        paymentInfo: `Payment and delivery information:\n\nüí∞ **Payment Methods**: We accept various payment methods (discuss via WhatsApp)\nüöö **Delivery**: We arrange delivery details through WhatsApp\nüìû **Contact**: Use the WhatsApp button for immediate assistance\n‚è∞ **Processing**: Orders are typically processed within 24 hours\n\nReady to order? Add items to your cart and click "Order via WhatsApp"!`,
        orderHelp: `Order assistance:\n\n1. **Find Products**: Browse categories or search by name/condition\n2. **Add to Cart**: Click the cart button on any product\n3. **Review Order**: Check your cart before ordering\n4. **WhatsApp Order**: Click "Order via WhatsApp" to finalize\n5. **Follow Up**: We'll contact you for payment and delivery\n\nNeed product recommendations? Tell me what condition you're treating!`,
        fallback: 'I recommend consulting a healthcare professional for medical advice.'
      },
      ru: {
        yesInStock: (name, stock, price, description) => `–î–∞! ${name} –µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏. –£ –Ω–∞—Å –µ—Å—Ç—å ${stock} –µ–¥–∏–Ω–∏—Ü.\n\n–¶–µ–Ω–∞: ${price}\n${description}`,
        outOfStock: (name, price, description) => `–ò–∑–≤–∏–Ω–∏—Ç–µ, ${name} —Å–µ–π—á–∞—Å –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏.\n\n–¶–µ–Ω–∞: ${price}\n${description}\n\n–•–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —è –ø–æ–∫–∞–∑–∞–ª –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã?`,
        productsContaining: (ingredient) => `–ü—Ä–æ–¥—É–∫—Ç—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ ${ingredient}:\n\n`,
        productsWithIngredients: `–ü—Ä–æ–¥—É–∫—Ç—ã —Å —ç—Ç–∏–º–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º–∏:\n\n`,
        hereAreProducts: (category) => `–í–æ—Ç –Ω–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category}:\n\n`,
        availableCategories: `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n`,
        mostAffordable: `–í–æ—Ç –Ω–∞—à–∏ —Å–∞–º—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:\n\n`,
        premiumProducts: `–í–æ—Ç –Ω–∞—à–∏ –ø—Ä–µ–º–∏—É–º –ø—Ä–æ–¥—É–∫—Ç—ã:\n\n`,
        stockStatus: (inStock, outOfStock) => `–°—Ç–∞—Ç—É—Å —Å–∫–ª–∞–¥–∞:\n‚Ä¢ ${inStock} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏\n‚Ä¢ ${outOfStock} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:\n\n`,
        forCondition: (condition) => `–î–ª—è ${condition} —è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é:\n\n`,
        foundProducts: (count) => `–Ø –Ω–∞—à–µ–ª ${count} –ø—Ä–æ–¥—É–∫—Ç(–æ–≤), —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–µ–º—É –ø–æ–∏—Å–∫—É:\n\n`,
        topRecommendations: `–í–æ—Ç –Ω–∞—à–∏ —Ç–æ–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n\n`,
        helpText: `–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å:\n‚Ä¢ –ü–æ–∏—Å–∫–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—é\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞–ª–∏—á–∏—è –Ω–∞ —Å–∫–ª–∞–¥–µ\n‚Ä¢ –ü–æ–∫–∞–∑–æ–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ–º —Ü–µ–Ω –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö\n‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞—Ö\n‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n\n–ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è –æ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–¥–æ—Ä–æ–≤—å—è –∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∏—â–µ—Ç–µ!`,
        heresWhatFound: `–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª:\n\n`,
        stockInfo: (stock) => stock > 0 ? `–í –Ω–∞–ª–∏—á–∏–∏ (${stock})` : '–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏',
        // Purchase guidance responses in Russian
        howToBuy: `–ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞—à–µ–π –∞–ø—Ç–µ–∫–µ:\n\n1. **–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤**: –ò–∑—É—á–∏—Ç–µ –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫\n2. **–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É**: –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É" –Ω–∞ –ª—é–±–æ–º —Ç–æ–≤–∞—Ä–µ\n3. **–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã**: –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É –∫–æ—Ä–∑–∏–Ω—ã –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É\n4. **–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞**: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É WhatsApp –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞\n5. **–û–ø–ª–∞—Ç–∞**: –ú—ã –æ—Ä–≥–∞–Ω–∏–∑—É–µ–º –æ–ø–ª–∞—Ç—É –∏ –¥–æ—Å—Ç–∞–≤–∫—É —á–µ—Ä–µ–∑ WhatsApp\n\n–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å –≤ –ø–æ–∏—Å–∫–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞? –ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è!`,
        purchaseSteps: `–í–æ—Ç –∫–∞–∫ –∫—É–ø–∏—Ç—å –≤ –Ω–∞—à–µ–π –∞–ø—Ç–µ–∫–µ:\n\nüõí **–®–∞–≥ 1**: –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞—à–∏ —Ç–æ–≤–∞—Ä—ã –∏–ª–∏ –Ω–∞–π–¥–∏—Ç–µ —Ç–æ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ\nüõí **–®–∞–≥ 2**: –ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É" –Ω–∞ –Ω—É–∂–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö\nüõí **–®–∞–≥ 3**: –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–æ—Ä–∑–∏–Ω—É (–∏–∫–æ–Ω–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É)\nüõí **–®–∞–≥ 4**: –ù–∞–∂–º–∏—Ç–µ "–ó–∞–∫–∞–∑–∞—Ç—å —á–µ—Ä–µ–∑ WhatsApp" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏\nüõí **–®–∞–≥ 5**: –ú—ã –æ—Ä–≥–∞–Ω–∏–∑—É–µ–º –æ–ø–ª–∞—Ç—É –∏ –¥–æ—Å—Ç–∞–≤–∫—É\n\n–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ª—é–±–æ–º —Ç–æ–≤–∞—Ä–µ!`,
        cartHelp: `–ü–æ–º–æ—â—å —Å –∫–æ—Ä–∑–∏–Ω–æ–π –ø–æ–∫—É–ø–æ–∫:\n\n‚Ä¢ **–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã**: –ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É" –Ω–∞ –ª—é–±–æ–º —Ç–æ–≤–∞—Ä–µ\n‚Ä¢ **–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã**: –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–∫–æ–Ω–∫—É –∫–æ—Ä–∑–∏–Ω—ã (üõí) –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É\n‚Ä¢ **–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä—ã**: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–∫–æ–Ω–∫—É –∫–æ—Ä–∑–∏–Ω—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ\n‚Ä¢ **–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑**: –ù–∞–∂–º–∏—Ç–µ "–ó–∞–∫–∞–∑–∞—Ç—å —á–µ—Ä–µ–∑ WhatsApp" –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã\n‚Ä¢ **–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É**: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É" –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n\n–ù—É–∂–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º? –ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç–µ!`,
        paymentInfo: `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –∏ –¥–æ—Å—Ç–∞–≤–∫–µ:\n\nüí∞ **–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã**: –ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã (–æ–±—Å—É–∂–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ WhatsApp)\nüöö **–î–æ—Å—Ç–∞–≤–∫–∞**: –ú—ã –æ—Ä–≥–∞–Ω–∏–∑—É–µ–º –¥–æ—Å—Ç–∞–≤–∫—É —á–µ—Ä–µ–∑ WhatsApp\nüìû **–ö–æ–Ω—Ç–∞–∫—Ç—ã**: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É WhatsApp –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø–æ–º–æ—â–∏\n‚è∞ **–û–±—Ä–∞–±–æ—Ç–∫–∞**: –ó–∞–∫–∞–∑—ã –æ–±—ã—á–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤\n\n–ì–æ—Ç–æ–≤—ã –∑–∞–∫–∞–∑–∞—Ç—å? –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –Ω–∞–∂–º–∏—Ç–µ "–ó–∞–∫–∞–∑–∞—Ç—å —á–µ—Ä–µ–∑ WhatsApp"!`,
        orderHelp: `–ü–æ–º–æ—â—å —Å –∑–∞–∫–∞–∑–æ–º:\n\n1. **–ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã**: –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –Ω–∞–π–¥–∏—Ç–µ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é/—Å–æ—Å—Ç–æ—è–Ω–∏—é\n2. **–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É**: –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∫–æ—Ä–∑–∏–Ω—ã –Ω–∞ –ª—é–±–æ–º —Ç–æ–≤–∞—Ä–µ\n3. **–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–∫–∞–∑**: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä–∑–∏–Ω—É –ø–µ—Ä–µ–¥ –∑–∞–∫–∞–∑–æ–º\n4. **–ó–∞–∫–∞–∑ —á–µ—Ä–µ–∑ WhatsApp**: –ù–∞–∂–º–∏—Ç–µ "–ó–∞–∫–∞–∑–∞—Ç—å —á–µ—Ä–µ–∑ WhatsApp" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è\n5. **–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ**: –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏ –¥–æ—Å—Ç–∞–≤–∫–∏\n\n–ù—É–∂–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º? –°–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã –ª–µ—á–∏—Ç–µ!`,
        fallback: '–Ø —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤.'
      }
    };
    
    const response = responses[currentLang]?.[key] || responses.en[key];
    return typeof response === 'function' ? response(...Object.values(params)) : response;
  }

  async ask(prompt) {
    // First try to answer from local product data
    const local = this.answerFromLocal(prompt);
    if (local) return local;

    // Fallback to OpenAI via server-side proxy
    try {
      // TODO: This endpoint must be a server-side proxy that securely attaches the OPENAI_API_KEY.
      const res = await fetch('/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          prompt: prompt,
          context: this.buildProductContext()
        })
      });
      
      if (!res.ok) {
        throw new Error(`HTTP error! status: ${res.status}`);
      }
      
      const data = await res.json();
      return data?.response?.trim() || this.getLocalizedResponse('fallback');
    } catch (error) {
      console.error('AI service error:', error);
      return this.getLocalizedResponse('fallback');
    }
  }

  answerFromLocal(query) {
    const q = query.toLowerCase();
    const products = this.productService.getProducts();
    const isRussian = this.isRussianQuery(query);
    
    // Helper function to get translated product info
    const getProductInfo = (product) => {
      const name = window.getTranslatedProductName ? window.getTranslatedProductName(product.id) : product.name;
      const description = window.getTranslatedProductDescription ? window.getTranslatedProductDescription(product.id) : product.description;
      const price = window.buildCurrency ? window.buildCurrency(product.price) : `‚ÇΩ${product.price}`;
      const stock = this.getLocalizedResponse('stockInfo', { stock: product.stock });
      return { name, description, price, stock, original: product };
    };

    // Helper function to format product response
    const formatProducts = (products, maxCount = 5) => {
      return products.slice(0, maxCount).map(p => {
        const info = getProductInfo(p);
        return `${info.name} - ${info.price}\n${info.description}\n–ù–∞–ª–∏—á–∏–µ: ${info.stock}`;
      }).join('\n\n');
    };

    // Product search by name (handles "Do you have X in stock?" queries)
    if (q.includes('do you have') || q.includes('–µ—Å—Ç—å –ª–∏') || q.includes('have') || q.includes('stock') || q.includes('–Ω–∞–ª–∏—á–∏')) {
      // Extract product name from query - improved logic
      const searchTerms = q
        .replace(/do you have|–µ—Å—Ç—å –ª–∏|in stock|–≤ –Ω–∞–ª–∏—á–∏–∏|available|–¥–æ—Å—Ç—É–ø–Ω|\?/g, '')
        .trim()
        .split(' ')
        .filter(word => word.length >= 3 && !['the', 'a', 'an', 'any', 'you', 'and', '—É', '–Ω–∞—Å', '–µ—Å—Ç—å'].includes(word.toLowerCase()));
      
      console.log('Search terms extracted:', searchTerms); // Debug log
      
      const matches = products.filter(p => 
        searchTerms.some(term => 
          p.name.toLowerCase().includes(term.toLowerCase()) ||
          p.description.toLowerCase().includes(term.toLowerCase()) ||
          p.active_ingredient.toLowerCase().includes(term.toLowerCase()) ||
          (p.name_ru && p.name_ru.toLowerCase().includes(term.toLowerCase())) ||
          (p.description_ru && p.description_ru.toLowerCase().includes(term.toLowerCase()))
        )
      );
      
      console.log('Matches found:', matches.map(p => p.name)); // Debug log
      
      if (matches.length > 0) {
        const product = matches[0];
        const info = getProductInfo(product);
        if (product.stock > 0) {
          return this.getLocalizedResponse('yesInStock', {
            name: info.name,
            stock: product.stock,
            price: info.price,
            description: info.description
          });
        } else {
          return this.getLocalizedResponse('outOfStock', {
            name: info.name,
            price: info.price,
            description: info.description
          });
        }
      }
    }

    // Ingredient queries (handles "What contains magnesium?" type queries)
    if (q.includes('contains') || q.includes('—Å–æ–¥–µ—Ä–∂–∏—Ç') || q.includes('with') || q.includes('ingredient')) {
      const ingredients = {
        'magnesium': ['Magnesium Glycinate'],
        '–º–∞–≥–Ω–∏–π': ['Magnesium Glycinate'],
        'melatonin': ['Melatonin Sleep Aid'],
        '–º–µ–ª–∞—Ç–æ–Ω–∏–Ω': ['Melatonin Sleep Aid'],
        'vitamin d': ['Vitamin D3 Supreme'],
        '–≤–∏—Ç–∞–º–∏–Ω –¥': ['Vitamin D3 Supreme'],
        'omega': ['Omega-3 Complete'],
        '–æ–º–µ–≥–∞': ['Omega-3 Complete'],
        'aspirin': ['Aspirin Plus'],
        '–∞—Å–ø–∏—Ä–∏–Ω': ['Aspirin Plus'],
        'probiotic': ['Probiotic Balance'],
        '–ø—Ä–æ–±–∏–æ—Ç–∏–∫': ['Probiotic Balance'],
        'collagen': ['Collagen Beauty'],
        '–∫–æ–ª–ª–∞–≥–µ–Ω': ['Collagen Beauty'],
        'zinc': ['Zinc Immune Support'],
        '—Ü–∏–Ω–∫': ['Zinc Immune Support'],
        'turmeric': ['Turmeric Curcumin'],
        '–∫—É—Ä–∫—É–º–∞': ['Turmeric Curcumin'],
        'glucosamine': ['Glucosamine Joint Care'],
        '–≥–ª—é–∫–æ–∑–∞–º–∏–Ω': ['Glucosamine Joint Care'],
        'coq10': ['CoQ10 Heart Health'],
        '–∫–æ—ç–Ω–∑–∏–º': ['CoQ10 Heart Health'],
        'vitamin b': ['B-Complex Energy'],
        '–≤–∏—Ç–∞–º–∏–Ω –±': ['B-Complex Energy']
      };

      for (const [ingredient, productNames] of Object.entries(ingredients)) {
        if (q.includes(ingredient)) {
          const matchedProducts = products.filter(p => 
            productNames.some(name => p.name.includes(name)) ||
            p.active_ingredient.toLowerCase().includes(ingredient) ||
            (p.active_ingredient_ru && p.active_ingredient_ru.toLowerCase().includes(ingredient))
          );
          
          if (matchedProducts.length > 0) {
            return this.getLocalizedResponse('productsContaining', { ingredient }) + formatProducts(matchedProducts);
          }
        }
      }

      // General ingredient search
      const ingredientTerms = q.split(' ').filter(word => 
        !['what', 'contains', 'with', 'ingredient', 'products', 'medicine', '—á—Ç–æ', '—Å–æ–¥–µ—Ä–∂–∏—Ç', '—Å', '–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç', '–ø—Ä–æ–¥—É–∫—Ç—ã', '–ª–µ–∫–∞—Ä—Å—Ç–≤–∞'].includes(word)
      );
      
      const ingredientMatches = products.filter(p => 
        ingredientTerms.some(term => 
          p.active_ingredient.toLowerCase().includes(term) ||
          p.name.toLowerCase().includes(term) ||
          (p.active_ingredient_ru && p.active_ingredient_ru.toLowerCase().includes(term)) ||
          (p.name_ru && p.name_ru.toLowerCase().includes(term))
        )
      );
      
      if (ingredientMatches.length > 0) {
        return this.getLocalizedResponse('productsWithIngredients') + formatProducts(ingredientMatches);
      }
    }

    // Category queries
    if (q.includes('category') || q.includes('–∫–∞—Ç–µ–≥–æ—Ä–∏—è') || q.includes('show') || q.includes('–ø–æ–∫–∞–∂–∏')) {
      const categoryMap = {
        'pain': 'Pain Relief',
        '–±–æ–ª—å': 'Pain Relief',
        '–≤–∏—Ç–∞–º–∏–Ω': 'Vitamins & Supplements',
        'vitamin': 'Vitamins & Supplements',
        '—Å–æ–Ω': 'Sleep & Relaxation',
        'sleep': 'Sleep & Relaxation',
        '–∫—Ä–∞—Å–æ—Ç–∞': 'Beauty & Wellness',
        'beauty': 'Beauty & Wellness',
        '–ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ': 'Digestive Health',
        'digestive': 'Digestive Health',
        '—Å–µ—Ä–¥—Ü–µ': 'Heart Health',
        'heart': 'Heart Health',
        '—Å—É—Å—Ç–∞–≤—ã': 'Joint Health',
        'joint': 'Joint Health'
      };

      for (const [key, category] of Object.entries(categoryMap)) {
        if (q.includes(key)) {
          const categoryProducts = products.filter(p => p.category === category);
          if (categoryProducts.length > 0) {
            return this.getLocalizedResponse('hereAreProducts', { category }) + formatProducts(categoryProducts);
          }
        }
      }

      // Show all categories
      if (q.includes('–≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏') || q.includes('all categories')) {
        const categories = this.productService.getCategories();
        return this.getLocalizedResponse('availableCategories') + categories.map(cat => `‚Ä¢ ${cat}`).join('\n');
      }
    }

    // Price queries
    if (q.includes('—Ü–µ–Ω–∞') || q.includes('price') || q.includes('—Å—Ç–æ–∏–º–æ—Å—Ç—å') || q.includes('cost')) {
      if (q.includes('–¥–µ—à–µ–≤') || q.includes('cheap') || q.includes('–Ω–µ–¥–æ—Ä–æ–≥')) {
        const cheapProducts = products.filter(p => p.price < 200).sort((a, b) => a.price - b.price);
        if (cheapProducts.length > 0) {
          return this.getLocalizedResponse('mostAffordable') + formatProducts(cheapProducts);
        }
      }
      
      if (q.includes('–¥–æ—Ä–æ–≥') || q.includes('expensive') || q.includes('–ø—Ä–µ–º–∏—É–º')) {
        const expensiveProducts = products.filter(p => p.price > 500).sort((a, b) => b.price - a.price);
        if (expensiveProducts.length > 0) {
          return this.getLocalizedResponse('premiumProducts') + formatProducts(expensiveProducts);
        }
      }
    }

    // Stock queries
    if (q.includes('–Ω–∞–ª–∏—á–∏–µ') || q.includes('stock') || q.includes('–≤ –Ω–∞–ª–∏—á–∏–∏') || q.includes('available')) {
      const inStock = products.filter(p => p.stock > 0);
      const outOfStock = products.filter(p => p.stock === 0);
      
      return this.getLocalizedResponse('stockStatus', { inStock: inStock.length, outOfStock: outOfStock.length }) + formatProducts(inStock);
    }

    // Health condition mapping
    const healthConditions = {
      '–≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å': ['Aspirin Plus'],
      'headache': ['Aspirin Plus'],
      '–±–æ–ª—å': ['Aspirin Plus'],
      'pain': ['Aspirin Plus'],
      '–≤–∏—Ç–∞–º–∏–Ω': ['Vitamin D3 Supreme', 'Omega-3 Complete', 'B-Complex Energy'],
      'vitamin': ['Vitamin D3 Supreme', 'Omega-3 Complete', 'B-Complex Energy'],
      '—Å–æ–Ω': ['Melatonin Sleep Aid'],
      'sleep': ['Melatonin Sleep Aid'],
      '–±–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞': ['Melatonin Sleep Aid'],
      'insomnia': ['Melatonin Sleep Aid'],
      '–∫–æ–∂–∞': ['Collagen Beauty'],
      'skin': ['Collagen Beauty'],
      '–≤–æ–ª–æ—Å—ã': ['Collagen Beauty'],
      'hair': ['Collagen Beauty'],
      '–ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ': ['Probiotic Balance'],
      'digestion': ['Probiotic Balance'],
      '–∏–º–º—É–Ω–∏—Ç–µ—Ç': ['Zinc Immune Support', 'Vitamin D3 Supreme'],
      'immune': ['Zinc Immune Support', 'Vitamin D3 Supreme'],
      '—ç–Ω–µ—Ä–≥–∏—è': ['B-Complex Energy'],
      'energy': ['B-Complex Energy'],
      '—Å—É—Å—Ç–∞–≤—ã': ['Glucosamine Joint Care', 'Turmeric Curcumin'],
      'joints': ['Glucosamine Joint Care', 'Turmeric Curcumin'],
      '—Å–µ—Ä–¥—Ü–µ': ['CoQ10 Heart Health', 'Omega-3 Complete'],
      'heart': ['CoQ10 Heart Health', 'Omega-3 Complete']
    };

    for (const [condition, productNames] of Object.entries(healthConditions)) {
      if (q.includes(condition)) {
        const matchedProducts = products.filter(p => 
          productNames.some(name => p.name.includes(name))
        );
        
        if (matchedProducts.length > 0) {
          return this.getLocalizedResponse('forCondition', { condition }) + formatProducts(matchedProducts);
        }
      }
    }

    // General product search
    if (q.includes('–Ω–∞–π—Ç–∏') || q.includes('find') || q.includes('search') || q.includes('–∏—â—É') || q.includes('looking for')) {
      const searchTerms = q
        .replace(/–Ω–∞–π—Ç–∏|find|search|–∏—â—É|looking for|–¥–ª—è|for|–º–Ω–µ|me/g, '')
        .split(' ')
        .filter(word => word.length > 2);
      
      const matches = products.filter(p => 
        searchTerms.some(term => 
          p.name.toLowerCase().includes(term) ||
          p.description.toLowerCase().includes(term) ||
          p.active_ingredient.toLowerCase().includes(term) ||
          (p.name_ru && p.name_ru.toLowerCase().includes(term)) ||
          (p.description_ru && p.description_ru.toLowerCase().includes(term)) ||
          (p.active_ingredient_ru && p.active_ingredient_ru.toLowerCase().includes(term))
        )
      );
      
      if (matches.length > 0) {
        return this.getLocalizedResponse('foundProducts', { count: matches.length }) + formatProducts(matches);
      }
    }

    // General recommendations
    if (q.includes('—Ä–µ–∫–æ–º–µ–Ω–¥') || q.includes('recommend') || q.includes('–ø–æ—Å–æ–≤–µ—Ç') || q.includes('suggest')) {
      const featured = products.filter(p => p.id <= 3); // Featured products
      return this.getLocalizedResponse('topRecommendations') + formatProducts(featured);
    }

    // Purchase guidance queries
    if (q.includes('–∫–∞–∫ –∫—É–ø–∏—Ç—å') || q.includes('how to buy') || q.includes('–∫–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å') || q.includes('how to order') || 
        q.includes('–∫–∞–∫ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏') || q.includes('how to purchase') || q.includes('–ø–æ–∫—É–ø–∫–∞') || q.includes('purchase')) {
      return this.getLocalizedResponse('howToBuy');
    }
    
    if (q.includes('–∫–æ—Ä–∑–∏–Ω–∞') || q.includes('cart') || q.includes('shopping cart') || q.includes('–ø–æ–∫—É–ø–∫–∏')) {
      return this.getLocalizedResponse('cartHelp');
    }
    
    if (q.includes('–æ–ø–ª–∞—Ç–∞') || q.includes('payment') || q.includes('–¥–æ—Å—Ç–∞–≤–∫–∞') || q.includes('delivery') || 
        q.includes('—Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã') || q.includes('payment methods')) {
      return this.getLocalizedResponse('paymentInfo');
    }
    
    if (q.includes('–∑–∞–∫–∞–∑') || q.includes('order') || q.includes('–æ—Ñ–æ—Ä–º–∏—Ç—å') || q.includes('checkout') || 
        q.includes('—à–∞–≥–∏') || q.includes('steps') || q.includes('–ø—Ä–æ—Ü–µ—Å—Å') || q.includes('process')) {
      return this.getLocalizedResponse('orderHelp');
    }
    
    if (q.includes('–∫—É–ø–∏—Ç—å') || q.includes('buy') || q.includes('–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏') || q.includes('get') || 
        q.includes('–ø–æ–ª—É—á–∏—Ç—å') || q.includes('where to buy') || q.includes('–≥–¥–µ –∫—É–ø–∏—Ç—å')) {
      return this.getLocalizedResponse('purchaseSteps');
    }

    // Help queries
    if (q.includes('–ø–æ–º–æ—â—å') || q.includes('help') || q.includes('—á—Ç–æ —É–º–µ–µ—à—å') || q.includes('what can you do')) {
      return this.getLocalizedResponse('helpText');
    }

    // Default category fallback - try to match any product names or ingredients
    const words = q.split(' ').filter(word => word.length > 2);
    const generalMatches = products.filter(p => 
      words.some(word => 
        p.name.toLowerCase().includes(word) ||
        p.description.toLowerCase().includes(word) ||
        p.active_ingredient.toLowerCase().includes(word) ||
        p.category.toLowerCase().includes(word) ||
        (p.name_ru && p.name_ru.toLowerCase().includes(word)) ||
        (p.description_ru && p.description_ru.toLowerCase().includes(word)) ||
        (p.active_ingredient_ru && p.active_ingredient_ru.toLowerCase().includes(word)) ||
        (p.category_ru && p.category_ru.toLowerCase().includes(word))
      )
    );
    
    if (generalMatches.length > 0) {
      return this.getLocalizedResponse('heresWhatFound') + formatProducts(generalMatches, 3);
    }

    return null; // No local match found, will fallback to API
  }
}